Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

A1. We have PageParser interface from parsing HTML from websites. If we’ll be parsing HTML from multiple web pages, we are going to need multiple instances of PageParser and each instance will be instantiated with a different url. In the PageParser, the factory could return a parser depending on the protocol in the url.
Also, the configuration of the PageParser is complex because it’s constructor has multiple parameters. Because of this reason, PageParserImpl take more time when run with ParallelWebCrawler.

Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
(Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential crawler. Why will it perform better?

A2. (a) Parallel web crawler divides the tasks into multiple subtasks and run them in different thread, utilizing multiple threads of the computer whereas sequential web crawler work just like a single task using a single thread. If we are already running multiple threads and we’re using parallel operations in some of them, which means we are adding more threads to the pool. This could easily turn into more threads than our system could handle and slow everything down due to context switching.
(b) If the user submits the big task in which long computations are required to sequential crawler, the task usually takes time to execute because the sequential crawler uses a single thread to perform the task, while parallel web crawler uses a ForkJoinPool instance to take benefits of all the available CPU cores and processes the task in parallel. So, in this case, the parallel web crawler will perform better than the sequential crawler.
Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

    (b) What are the join points of the Profiler in the web crawler program?

A3. (a) Logging is the cross-cutting concern which is addressed by the com.udacity.webcrawler.profiler.Profiler class.

(b) Join points of the Profiler:-

i.	provideWebCrawlerProxy() in the WebCrawlerModule.java file is one of the join points of the profiler.
ii.	In com.udacity.webcrawler.profiler.ProfilerModule class, provideProfiler(Clock clock) singleton method.
iii.	PageParserFactoryImpl.java, in the PageParser get(String url) is one of the join points of the profiler.

Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

A4. The three design patterns used in his project are:-
i.	Abstract Factory pattern
•	PageParser.java, PageParserFactory.java are the interfaces, PageParserFactoryImpl.java, PageParserImpl.java are the classes, ParallelWebCrawler.java and SequentialWebCrawler.java are the classes that used this pattern.

•	The thing I like about this pattern is that it’s possible to interchange the concrete classes without changing the client code at runtime.

•	The thing I don’t like about this pattern is that it’s complex to write the code in the initial phase.
ii.	Builder pattern
•	CrawlerConfiguration.java, CrawlResult.java, ParserModule.java are the classes that used this pattern.

•	The thing I like about this pattern is that it’s less error-prone as user will know what they are passing because of explicit method call.

•	The thing I don’t like about this pattern is that we need to write the same code again as Builder needs to copy all the fields from Original or item class.

iii.	Dependency Injection pattern
•	ParallelWebCrawler.java, WebCrawlerMain.java, SequentialWebCrawler.java, WebCrawlerModule.java, ProfilerImpl.java, PageParserFactoryImpl.java, ParserModule.java are the classes, Guice is the library that used this pattern.

•	The thing I like about this pattern is that the developers can independently develop classes that use each other while only needing to know the interface the classes will communicate through.

•	The thing I don’t like about this pattern is that it decreases coupling between classes and its dependency.




